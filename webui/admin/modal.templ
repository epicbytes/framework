package admin

import (
	"github.com/gofiber/fiber/v2"
	"github.com/sopa0/htmx-fiber"
)

type modal struct {
	class          templ.CSSClasses
	title          string
	titleComponent templ.Component
	content        []templ.Component
	contentHeader  []templ.Component
	contentFooter  []templ.Component
}

type ModalOption func(*modal)

func WithModalTitle(title string, contentHeader []templ.Component) ModalOption {
	return func(b *modal) {
		b.title = title
		b.contentHeader = contentHeader
	}
}

func WithModalTitleComponent(titleComponent templ.Component) ModalOption {
	return func(b *modal) {
		b.titleComponent = titleComponent
	}
}

func WithContent(content []templ.Component) ModalOption {
	return func(b *modal) {
		b.content = content
	}
}

templ (b *modal) render() {
	<dialog
		class="modal backdrop:bg-black/50"
	>
		<div class="modal-box max-w-3xl relative p-0 no-scrollbar">
			<header class="sticky top-0 p-4 bg-white z-10 no-scrollbar">
				<div class="flex justify-between">
					if len(b.title) > 0 {
						<h1 class="text-2xl font-bold">{ b.title }</h1>
					}
					if b.titleComponent != nil {
						@b.titleComponent
					}
					<form method="dialog" class={ "flex gap-2", templ.KV("ml-auto", len(b.title) == 0) }>
						<button formmethod="dialog" class="btn btn-sm btn-circle btn-ghost">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
							</svg>
						</button>
					</form>
				</div>
				if len(b.contentHeader) > 0 {
					<div>
						for _, headerElement := range b.contentHeader {
							@headerElement
						}
					</div>
				}
			</header>
			for _, comp := range b.content {
				@comp
			}
		</div>
	</dialog>
}

func NewModal(options ...ModalOption) templ.Component {
	newModal := &modal{
		class: templ.Classes("w-4", "h-4"),
	}
	for _, opt := range options {
		opt(newModal)
	}
	return newModal.render()
}

templ ModalFooter() {
	<div class="sticky bottom-0 p-4 bg-base-200 z-10 shadow-lg flex gap-4 justify-end">
		{ children... }
	</div>
}

func RenderModal(
	ctx *fiber.Ctx,
	options ...ModalOption,
) error {
	return htmx.NewResponse().
		Reswap(htmx.SwapInnerHTML).
		Retarget(".modal-receiver").
		AddTrigger(htmx.Trigger("show-modal")).
		RenderTempl(ctx, NewModal(options...))
}

templ AlertWrapper(component templ.Component) {
	<p class="p-4">
		@component
	</p>
}

func RenderAlertModal(ctx *fiber.Ctx, alertMessage string) error {
	return RenderModal(ctx, WithModalTitle("alert", nil), WithContent([]templ.Component{AlertWrapper(templ.Raw(alertMessage))}))
}

func RenderAlertWithError(ctx *fiber.Ctx, alertMessage string, code int) error {
	return RenderModal(ctx, WithModalTitle("alert error", nil), WithContent([]templ.Component{AlertWrapper(templ.Raw(alertMessage))}))
}
