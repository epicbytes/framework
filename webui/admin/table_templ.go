// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package admin

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/samber/lo"
	"strings"
)

type TableResponsive string
type TableModifier string

const (
	// Extra small size
	TableXs TableResponsive = "table-xs"
	// Small size
	TableSm TableResponsive = "table-sm"
	// Normal size
	TableMd TableResponsive = "table-md"
	// Large size
	TableLg TableResponsive = "table-lg"
)

const (
	// For <table> to show zebra stripe rows
	Zebra TableModifier = "table-zebra"
	// For <table> to make all the rows inside <thead> and <tfoot> sticky
	PinRows TableModifier = "table-pin-rows"
	// For <table> to make all the <th> columns sticky
	PinCols TableModifier = "table-pin-cols"
)

type TableColumn struct {
	IsActive bool   `json:"is_active"`
	Title    string `json:"title"`
	Order    int    `json:"order"`
}

type TableSettings[T any] struct {
	EntityName   string
	IsEditable   bool
	IsFilterable bool
	IsPaginated  bool
	Columns      []TableColumn
	Rows         []T
}

type table[T any] struct {
	settings    *TableSettings[T]
	classes     templ.CSSClasses
	attrs       templ.Attributes
	responsive  TableResponsive
	modifiers   []TableModifier
	headerCells []templ.Component
	rows        []templ.Component
}

func Table[T any](settings *TableSettings[T]) *table[T] {
	return &table[T]{
		settings: settings,
	}
}

// WithClasses sets classes for <table> tag
func (t *table[T]) WithClasses(classes templ.CSSClasses) *table[T] {
	t.classes = classes
	return t
}

// WithAttributes sets additional attributes for <table> tag
func (t *table[T]) WithAttributes(attrs templ.Attributes) *table[T] {
	t.attrs = attrs
	return t
}

// WithModifiers sets table modifiers
func (t *table[T]) WithModifiers(modifiers ...TableModifier) *table[T] {
	t.modifiers = modifiers
	return t
}

// WithResponsive sets responsive options
func (t *table[T]) WithResponsive(responsive TableResponsive) *table[T] {
	t.responsive = responsive
	return t
}

func (t *table[T]) collectClasses() templ.CSSClasses {
	var classes string

	classes = t.classes.String()

	classes += " " + strings.Join(lo.Map(t.modifiers, func(item TableModifier, index int) string {
		return string(item)
	}), " ")

	classes += " " + string(t.responsive)

	unifiedClasses := lo.Uniq(strings.Split(classes, " "))
	return templ.Classes(unifiedClasses)
}

// Build returns templ component
func (t table[T]) Build() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"overflow-x-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{"table", t.collectClasses()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<table class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `admin/table.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, t.attrs)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if t.settings != nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<thead><tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, header := range t.settings.Columns {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<th>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(header.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `admin/table.templ`, Line: 109, Col: 25}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</th>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</tr></thead> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<tbody><tr><th>111</th></tr><tr><th>111</th></tr><tr><th>111</th></tr></tbody></table></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
